/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 30.03.2023 15:06:31

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 14288;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,6435 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038138742092996836, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 65, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*65] = { 
  /* [0][0][][] */ -100,-61,-79,-33,-16,-21,12,26,24,-20,5,43,11,38,9,-11,28,61,36,37,30,74,40,58,72,99,54,88,38,1,58,54,31,23,68,50,-25,-38,-12,-15,43,3,53,15,-13,34,44,5,35,32,83,26,-9,43,30,42,-8,-7,8,-2,1,9,54,-17,-24, -108,-120,-63,-30,-29,-5,34,50,-15,-9,9,21,21,-3,22,48,36,31,65,100,68,103,70,33,37,59,79,89,42,9,59,12,-5,20,50,83,33,8,-39,32,40,-49,-15,24,22,-12,-12,27,22,-17,39,91,31,64,10,-37,-19,34,-8,23,17,-10,83,-46,-23, -127,-93,-69,-85,-89,-17,-41,-24,-33,16,8,-31,-43,-59,-8,-20,59,36,26,40,63,23,0,60,9,23,22,56,-24,16,28,56,0,-2,22,23,-33,-35,-47,39,-47,-57,-17,-47,-55,24,16,22,-2,1,17,36,33,12,-2,-4,-35,-8,-31,-5,19,2,26,-34,-4, 
  /* [1][0][][] */ 8,27,-33,-62,11,1,-9,-71,-43,2,21,-84,-10,5,-31,-34,-62,-39,14,-73,-61,-25,-40,-37,17,-31,-85,-83,-53,61,-26,-64,-12,-25,63,-26,42,41,53,32,-12,43,-3,4,-12,62,44,-33,54,39,-3,18,1,-73,-9,-8,15,39,22,1,51,72,50,38,113, 12,2,-51,-41,35,-31,32,18,-24,-48,38,-74,-36,30,21,-122,-42,-44,40,1,-61,-45,-61,38,40,-27,-58,0,52,-68,29,-15,-28,10,20,32,-3,55,26,-14,71,58,-66,65,20,-35,59,52,-1,-15,-17,15,16,0,-20,-28,-12,-1,33,67,24,-57,-46,-3,-4, -37,-5,-42,-36,7,25,18,29,-8,0,-52,-80,-51,-35,21,-68,-14,-28,-12,-32,38,-55,52,5,41,-50,-16,-16,12,1,-13,34,64,54,127,69,99,65,40,32,115,67,2,-9,98,-57,72,31,-50,-79,-60,-40,-58,-90,-3,-11,5,7,-16,13,-41,1,-72,30,-4, 
  /* [2][0][][] */ 4,-44,-39,8,-76,-85,-75,-42,-38,-85,-81,-52,-44,-65,-94,-86,-69,-48,-80,-61,-108,-62,-84,-78,-90,-100,-48,-56,-75,-98,-94,-61,-39,-93,-104,-86,-96,-92,-63,-84,-120,-127,-88,-68,-112,-68,-90,-99,-113,-101,-51,-105,-71,-85,-71,-79,-87,-83,-105,-84,-99,-83,-108,-95,-94, 8,-35,3,-3,-47,-44,-21,-44,-21,-16,-78,-1,-11,-46,-56,-32,15,38,12,39,2,28,-12,-39,-11,36,-5,52,38,-26,6,7,38,-11,-41,43,20,17,-15,-31,8,4,7,31,12,-5,13,23,4,3,11,19,-40,15,-42,16,-30,-3,40,17,22,24,-1,0,-44, 9,-38,-28,5,-19,-16,2,-46,0,-19,-43,-18,-4,-10,-14,21,26,-4,42,49,51,24,43,7,60,26,46,97,44,9,60,42,78,24,8,68,78,24,5,24,52,10,15,64,13,47,23,42,41,1,2,30,9,28,16,18,29,32,7,45,5,-2,7,17,6, 
  /* [3][0][][] */ -10,73,-24,24,67,-51,-3,14,-26,-9,-10,-37,-50,4,26,-75,-55,-53,-88,-55,-28,-10,53,-39,13,-50,-99,-90,-20,15,-8,-15,-26,27,55,42,23,117,48,-30,63,74,23,-31,58,52,49,-18,-34,-9,-74,27,-16,-48,-32,50,2,43,35,26,20,19,19,-29,-21, 31,36,-10,13,42,32,-30,-44,6,-31,-9,-80,-102,24,-82,-54,-63,3,-13,-24,-20,-19,9,42,-23,-25,-58,-48,4,65,-49,18,10,23,120,38,34,20,4,2,20,6,73,-18,41,26,-33,-26,44,23,39,-61,47,14,26,30,33,-15,60,80,94,20,23,23,64, 14,63,-13,32,39,-53,43,-20,-4,-5,13,8,-27,54,-27,-24,-96,-63,-33,-61,-60,-53,31,15,-26,-79,-60,-90,42,-44,-42,-28,-48,22,65,-10,53,127,23,-20,-1,77,30,-21,16,53,-36,-8,24,-33,-12,-11,12,36,-24,44,1,-24,73,92,-8,-43,36,16,33, 
  /* [4][0][][] */ -47,-25,-99,-30,6,-109,-48,-50,-127,-63,-41,-11,-47,-31,-56,-94,-38,-98,-56,-86,-40,-46,-29,-95,-12,-8,-29,-82,38,-101,-20,-92,36,-56,-80,-83,41,49,-50,25,-37,27,-31,-43,33,-6,-71,-46,-23,-32,-20,-69,-63,-23,-77,-42,46,-66,-31,39,-19,-69,-50,61,52, 9,-95,-28,-47,-50,-2,-10,-98,-67,0,-59,-19,-123,-32,-69,-97,-81,-3,-29,-14,-75,-115,-75,-33,-17,-6,-86,-9,-24,-73,-94,-97,-50,-20,-13,-3,-69,43,-96,32,-78,-27,9,8,-74,-93,-37,-14,-26,-18,18,0,-10,-1,18,-11,-30,-18,43,2,-5,-52,27,-84,20, -40,-84,-9,-110,-23,-26,-14,-53,-66,-57,-32,-13,-87,-44,-62,-30,-24,-70,-46,-89,-101,-100,-62,7,-83,-84,-20,-72,23,28,24,-47,-65,37,-58,-21,22,1,-26,-21,-42,46,-88,-97,45,-51,-99,-75,-79,-73,-42,2,-19,28,-38,-17,-91,54,40,-79,-4,-30,25,12,-21, 
  /* [5][0][][] */ 19,18,-31,-32,-1,-48,-44,-58,-19,-114,-40,-36,-12,-30,-73,-27,-15,17,-59,15,-54,-38,29,-1,-14,-61,11,-95,-12,42,39,13,-64,14,31,49,21,17,-8,-34,-9,-15,-39,76,15,50,34,21,-64,47,-45,-77,-31,-39,-14,-18,52,-32,78,-21,-34,-68,-44,-32,18, -2,30,-8,-97,63,-1,21,-38,-12,-34,-12,-120,-9,-9,-24,-63,-45,-53,-83,-34,-70,-5,47,33,-111,-61,2,-38,39,-1,25,-19,-63,39,13,-21,-31,20,-32,29,65,62,4,12,70,-17,-56,-90,-72,46,-78,-40,3,-8,54,-8,-7,-29,69,-18,-2,-42,73,69,47, -32,10,-61,18,60,-47,11,-49,-114,-118,-39,-53,-11,-78,-73,-25,-127,-97,-26,-119,-67,-85,-22,-34,-56,-7,-8,-47,-70,36,-25,-33,-74,51,0,33,19,-15,-33,-48,19,-58,-22,15,18,-59,38,5,-33,25,-41,-16,-39,-4,-70,-28,74,4,35,82,41,30,-61,60,13, 
  /* [6][0][][] */ -4,-5,0,7,-10,-6,22,2,9,36,-9,14,11,-13,2,33,51,19,17,6,-9,14,-22,-16,1,33,45,66,16,-42,-32,26,17,-33,-86,-49,-65,-53,-53,-41,-97,-50,-48,-28,-81,-66,-68,-83,-75,-42,-53,-65,-50,-57,-46,-35,-80,-59,-85,-59,-62,-62,-53,-50,-64, 0,-14,5,30,-7,-2,-10,-15,-6,15,-7,1,25,-27,5,24,41,47,14,18,-17,35,-17,-45,11,47,54,66,8,-38,-15,29,28,-61,-76,-57,-68,-54,-58,-96,-123,-62,-61,-26,-70,-34,-61,-75,-31,-41,-41,-45,-51,-36,-53,-42,-48,-61,-80,-65,-49,-101,-65,-56,-86, 17,14,5,18,-12,-25,1,-1,2,6,-20,-5,17,8,10,33,44,34,19,25,2,-9,-41,-25,-1,57,21,66,-6,-55,-36,15,4,-64,-79,-68,-68,-73,-90,-59,-127,-101,-31,-64,-50,-74,-77,-66,-74,-73,-67,-42,-26,-71,-80,-54,-73,-72,-88,-80,-65,-54,-62,-73,-72, 
  /* [7][0][][] */ 11,-16,12,34,-9,-33,-16,-21,0,16,-35,-31,-16,-22,-49,12,-4,-33,-9,-48,-26,-15,-18,-54,-16,8,-38,6,14,-32,-69,-41,-5,-101,-120,-85,-11,-64,-47,-46,-89,-49,-42,-27,-59,-31,-31,-36,-21,-42,-56,-18,-52,-43,-16,-53,-28,-54,-35,-49,-39,-47,-16,-56,-12, 34,20,3,36,1,-12,-5,-29,19,-25,-47,-55,-5,-31,-50,-43,-14,-41,-44,-29,-65,13,-26,-89,-47,-32,-49,50,-8,-75,-38,-16,-28,-95,-127,-79,-8,-64,-65,-96,-81,-40,-35,-59,-34,-42,-63,-47,-34,-24,-22,-54,-48,-45,-29,-26,-45,-23,-27,-50,-9,-42,-52,-33,-20, 4,4,39,42,-28,-8,-8,-55,-2,-9,-41,-50,-14,-51,-88,-9,-7,-46,-25,-41,-71,-5,-59,-78,-62,-14,-51,51,2,-74,-51,-19,-32,-62,-86,-61,-66,-70,-90,-42,-76,-91,-39,-37,-42,-51,-39,-78,-49,-50,-53,-40,-49,-20,-50,-30,-49,-50,-43,-20,-32,-53,-37,-26,-52, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,65 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0036667410749942064, 0.0033353143371641636, 0.0061545111238956451, 0.0041796276345849037, 0.0024314960464835167, 0.0025873098056763411, 0.0098335016518831253, 0.0069713955745100975, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -23929, 2801, 89, 10512, -11850, -480, 1443, 3640, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.3984489669383038e-05, 1.2720469385385513e-05, 2.3472532120649703e-05, 1.594057357579004e-05, 9.2734198915422894e-06, 9.8676737252390012e-06, 3.7503737985389307e-05, 2.6588026230456308e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -28,-48,-42,23,-18,-64,12,-29, 4,-26,-87,-9,-25,-73,-4,-15, 18,-38,127,43,28,22,17,1, 
  /* [1][0][][] */ -36,31,-67,-40,-26,-25,8,47, -48,-32,-3,-23,-18,0,-5,10, 65,59,127,16,0,-26,-38,4, 
  /* [2][0][][] */ -7,47,53,-41,-43,30,-70,7, 127,-16,104,64,-25,-39,-70,8, -27,-75,-67,-47,-33,-13,98,-15, 
  /* [3][0][][] */ -46,8,6,15,-47,43,-66,5, -7,-21,-19,87,26,34,-19,-44, -14,-30,127,24,-33,30,3,-87, 
  /* [4][0][][] */ -51,-13,-18,-30,31,-46,3,81, -127,-23,-5,-24,-32,-35,57,99, 43,-20,121,36,-6,61,-4,90, 
  /* [5][0][][] */ 33,-61,-127,-6,54,90,15,47, -89,-81,-105,67,33,65,-98,-97, -54,5,35,-42,54,-10,-78,11, 
  /* [6][0][][] */ 17,1,-31,84,-4,35,-66,-44, -4,-1,59,-1,-11,67,-55,-127, -50,50,2,5,36,-33,-35,-97, 
  /* [7][0][][] */ -25,-23,127,-12,-48,10,83,81, 94,-20,-9,-10,14,8,82,-60, 19,-57,-50,-25,-7,-8,8,56, 
  /* [8][0][][] */ -81,-72,3,-27,-15,-23,58,127, -34,-55,-27,25,76,21,104,118, 55,-53,120,-62,27,-24,120,83, 
  /* [9][0][][] */ -100,-78,86,-7,17,66,-125,-58, 44,85,106,-55,-7,37,-25,-127, -53,-22,-70,52,-22,-27,-13,-84, 
  /* [10][0][][] */ 11,2,93,-26,18,-44,13,97, 111,27,51,-17,89,35,125,-15, 6,-4,49,-79,-21,-26,127,49, 
  /* [11][0][][] */ 10,-33,-46,53,-29,-27,111,7, -51,104,75,-28,-45,17,45,127, 82,53,-89,69,63,-49,119,18, 
  /* [12][0][][] */ 51,-14,-99,-34,38,55,88,-43, 12,-32,59,-39,56,-35,84,84, 17,9,-83,-42,9,42,55,127, 
  /* [13][0][][] */ -27,1,-85,64,-28,-28,-65,-127, -60,-24,-58,-19,50,19,-95,-124, -61,-48,-72,57,8,40,-21,-107, 
  /* [14][0][][] */ -34,5,70,66,-64,80,-94,-127, 9,27,-118,65,59,-12,-100,-126, -89,40,-19,-45,-24,44,-72,-83, 
  /* [15][0][][] */ 47,23,4,92,-46,-79,-127,-31, -49,6,-37,-81,51,55,21,-10, 38,-58,-17,-50,-43,35,-31,-7, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.005403605755418539, 0.0071234740316867828, 0.0040940623730421066, 0.0048266500234603882, 0.0046254303306341171, 0.0027413207571953535, 0.0045468490570783615, 0.0064848442561924458, 0.0037265690043568611, 0.0030522115994244814, 0.0034608996938914061, 0.0035530733875930309, 0.0041990350000560284, 0.0046380781568586826, 0.0036354358308017254, 0.0035765341017395258, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -4062, -1751, -3620, 776, -1568, -3602, 5077, -338, -568, 2567, -499, -5114, -385, 6041, 6758, -288, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 5.8816720411414281e-05, 7.7536999015137553e-05, 4.4562711991602555e-05, 5.2536721341311932e-05, 5.0346501666354015e-05, 2.9838500267942436e-05, 4.9491165555082262e-05, 7.0585694629698992e-05, 4.0562648791819811e-05, 3.3222459023818374e-05, 3.7670914025511593e-05, 3.8674199458910152e-05, 4.5705306547461078e-05, 5.048417006037198e-05, 3.9570692024426535e-05, 3.8929560105316341e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[2*400] = { 
  -37, -52, -1, -31, -12, -16, 32, 28, -33, -3, -3, -6, 13, 41, 40, -2, -16, -18, 14, -27, -27, 27, -2, -13, -40, -3, 1, -48, 16, 29, 14, 10, 48, 5, -11, -6, -1, -25, 38, -22, -37, 1, -30, -33, -44, 14, 30, -7, -15, -69, 7, -4, 12, 15, -21, 39, -7, -17, 16, -7, 18, 19, 6, 22, 13, 1, 5, -13, 29, -18, 12, -7, -4, -17, -30, 15, -7, 37, 5, -20, 0, 11, -3, -13, -42, 1, 13, -28, -12, -6, -8, -20, -30, 38, 8, -3, 18, -2, 20, 18, -57, -11, 56, 9, -44, 25, -31, -12, -43, 86, 2, -9, 38, 19, 2, 44, -28, -23, -5, -29, -18, -4, -20, 31, 3, 66, 26, 13, 6, -6, -11, 36, -2, 0, 41, 45, -15, 23, 24, -15, -1, 56, 30, 12, -57, -30, -14, 3, -36, 11, 8, 14, -35, 15, -8, -7, -26, 63, 59, 1, 11, 10, -5, 13, 12, -8, -7, -19, -42, -26, -12, -35, -21, 45, 33, -3, -22, -14, 0, 12, -30, -10, 17, 16, -13, 4, -18, -34, -11, 48, 10, 10, 4, -10, -3, -12, 3, 3, -1, -26, 2, -30, -24, -18, -18, 26, -4, 1, 21, -16, 27, 20, -13, -10, 3, 23, -35, 17, 10, -34, -33, 32, 13, 7, -12, -40, 11, 4, 8, 10, 20, -25, -12, 11, 6, -14, 2, 18, 40, 9, -8, -28, -13, -5, -15, 2, -10, -4, -19, 9, 9, -48, -22, 60, 27, -19, 20, -8, -4, 34, -1, 20, 23, -45, -10, 22, -17, -27, -10, -6, 17, -35, -44, -29, -26, 10, -26, 0, 16, 35, 0, 15, 25, 14, 14, 13, 12, 15, 1, -26, -14, -10, -23, -6, -40, -28, 0, -7, 1, -30, -5, -21, -39, -2, -23, 7, -42, -14, -13, -12, 9, -8, -12, -14, -50, 0, 34, 16, -25, 5, -5, 17, -41, 10, 22, -16, -27, -16, -7, 8, -9, 6, -3, 26, 8, -43, 22, 94, 17, 76, 37, 21, 34, -67, -2, 20, 13, 46, -16, 15, 22, -4, 13, 11, 81, -12, -73, -10, 51, 46, -72, 52, 34, -14, -115, 44, 48, 1, 29, -34, 6, 24, -74, 0, 63, -77, -84, 3, -98, -49, -58, 98, 55, 49, -15, -29, -3, 22, -60, 12, 64, -127, -70, 35, -60, -48, -56, 119, 43, 8, 
  43, 12, -3, 30, 30, 13, -13, -15, 38, 10, 4, 12, -14, -40, -48, -20, 31, 4, 10, 30, 17, -20, -11, 7, 11, -8, 36, 34, -12, -19, -7, 16, -51, -1, 14, -12, 3, 2, -24, 14, 14, 16, 38, 61, 31, -35, -15, 18, 30, 71, 6, 22, -10, -16, 13, -20, 20, -11, 7, 5, -18, -51, -4, -10, -25, 11, -12, -27, -33, 0, 4, 23, 2, -15, 13, -13, -4, -27, -23, 12, -18, -3, 27, -4, 29, -14, 13, 17, -7, -22, 5, -10, 22, -29, -4, 4, -5, 26, 14, -14, 55, 10, -26, -11, 64, -19, 30, 16, 17, -96, 4, 9, -29, -33, 2, -47, 14, -9, 6, 41, 36, 6, 27, -12, -12, -78, -16, -16, -9, 5, 17, -14, 14, -11, -43, -32, 47, -24, -1, 27, -1, -33, -29, -13, 61, 10, 31, 26, 54, -19, -9, -25, 58, -6, 30, 14, 38, -72, -44, -32, -12, 6, 30, 1, -1, 2, 6, 43, 7, 0, 35, 23, -11, -31, 1, -15, 41, 34, 1, 5, -2, 0, 5, -15, -24, 24, 20, 48, 6, -41, -23, -10, -3, 11, -14, -9, 26, -14, 5, 18, 27, 16, 30, 32, 28, -24, 6, 16, 8, 1, -6, -26, 4, -11, 0, -18, 1, -7, -20, 22, 44, -38, -27, -7, 25, 37, 6, 14, 27, 16, -14, 11, 16, 15, -10, 1, 4, -51, -16, 12, -11, 34, 24, 29, -3, 0, -16, 3, 18, 19, 1, 26, 25, -57, -20, 9, 14, 14, 34, -21, -9, 18, -3, 36, -5, -18, -18, 16, 16, -9, 6, 36, 50, 29, -6, -14, -7, -3, 5, -33, -27, -21, -13, -25, -22, -28, -10, -19, 6, 24, 23, 15, -5, -8, 23, 37, -22, 15, 39, 38, 9, -7, 36, 33, -9, 3, 38, -11, 1, 2, 26, -4, 3, -4, 67, -5, 1, -13, -16, 1, -7, 22, 33, -20, -10, 17, 1, 37, -12, -20, 2, -24, 2, 1, -36, 38, -24, -113, -26, -53, -51, -5, -40, 86, -12, -43, 11, -5, 16, -45, -39, -1, 14, 21, -68, -12, 61, 9, -62, -47, 61, -50, -15, 31, 92, -34, -29, -2, 0, -5, -9, -35, 71, -6, -55, 77, 91, -22, 94, 54, 61, -126, -21, -38, 18, 32, 20, -18, 70, 19, -65, 122, 104, -43, 67, 71, 89, -110, -38, 19, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 2,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0057774968445301056, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[2] = { -75, 75, };
const TfArray<1, int> tensor_dimension11 = { 1, { 2 } };
const TfArray<1, float> quant11_scale = { 1, { 5.2676634368253872e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,65 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0038138742092996836, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.010884717106819153, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.010884717106819153, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.010884717106819153, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.010884717106819153, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0091175530105829239, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0091175530105829239, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0091175530105829239, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0091175530105829239, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.073807746171951294, } };
const TfArray<1, int> quant21_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6448, (TfLiteIntArray*)&tensor_dimension0, 6435, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 6435, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6448, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
